/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.smart.web;

import com.smart.cons.CommonConstant;
import com.smart.dao.Page;
import com.smart.domain.Board;
import com.smart.domain.Post;
import com.smart.domain.Topic;
import com.smart.domain.User;
import com.smart.service.ForumService;
import jdk.nashorn.api.scripting.NashornScriptEngineFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.script.ScriptEngine;
import javax.servlet.http.HttpServletRequest;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;

/**
 * 这个Action负责处理论坛普通操作功能的请求，包括：显示论坛版块列表、显示论坛版块主题列表、
 * 表主题帖、回复帖子、删除帖子、设置精华帖子等操作。
 */
@Controller
public class BoardManageController extends BaseController {

    private ForumService forumService;

    @Autowired
    public void setForumService(ForumService forumService) {
        this.forumService = forumService;
    }

    /**
     * 列出论坛模块下的主题帖子
     *
     * @param boardId
     * @return
     */
    @RequestMapping(value = "/boards/{boardId}/topic", method = RequestMethod.GET)
    @ResponseBody
    public Page listBoardTopics(@PathVariable Integer boardId, @RequestParam(value = "pageNo", required = false) Integer pageNo) {
//		ModelAndView view =new ModelAndView();
        Board board = forumService.getBoardById(boardId);
        pageNo = pageNo == null ? 1 : pageNo;
        Page pagedTopic = forumService.getPagedTopics(boardId, pageNo,
                CommonConstant.PAGE_SIZE);
        return pagedTopic;
    }

    /**
     * 添加主题帖页面
     *
     * @param boardId
     * @return
     */
    @RequestMapping(value = "/board/addTopicPage-{boardId}", method = RequestMethod.GET)
    public ModelAndView addTopicPage(@PathVariable Integer boardId) {
        ModelAndView view = new ModelAndView();
        view.addObject("boardId", boardId);
        view.setViewName("/addTopic");
        return view;
    }

    /**
     * 添加一个主题帖
     *
     * @param request
     * @param topic
     * @return
     */
    @RequestMapping(value = "/board/addTopic", method = RequestMethod.POST)
    public String addTopic(HttpServletRequest request, Topic topic) {
        User user = getSessionUser(request);
        topic.setUser(user);
        Date now = new Date();
        topic.setCreateTime(now);
        topic.setLastPost(now);
        forumService.addTopic(topic);
        String targetUrl = "/board/listBoardTopics-" + topic.getBoardId()
                + ".html";
        return "redirect:" + targetUrl;
    }

    /**
     * 列出主题的所有帖子
     *
     * @param topicId
     * @return
     */
    @RequestMapping(value = "/board/{boardId}/topic/{topicId}/post", method = RequestMethod.GET)
    @ResponseBody
    public Page listTopicPosts(@PathVariable Integer boardId, @PathVariable Integer topicId, @RequestParam(value = "pageNo", required = false) Integer pageNo) {
        pageNo = pageNo == null ? 1 : pageNo;
        Page pagedPost = forumService.getPagedPosts(topicId, pageNo,
                CommonConstant.PAGE_SIZE);
        return pagedPost;
    }

    /**
     * 回复主题
     *
     * @return
     */
    @RequestMapping(value = "/board/{boardId}/topic/{topicId}/post/reply", method = RequestMethod.POST, consumes = "application/json")
    @ResponseBody
    public Page addPost(HttpServletRequest request, @PathVariable Integer boardId, @PathVariable Integer topicId, @RequestBody String params) throws Exception {
        Post post = new Post();
        post.setCreateTime(new Date());
        post.setUser(getSessionUser(request));
        Topic topic = new Topic();
        topic.setTopicId(topicId);
        ScriptEngine engine = new NashornScriptEngineFactory().getScriptEngine("nashorn");
        Integer pageNo = (Integer) engine.eval("var a = " + params + ";a['pageNo']");
        String postTitle = (String) engine.eval("var a = " + params + ";a['postTitle']");
        String postText = (String) engine.eval("var a = " + params + ";a['postText']");
        post.setPostTitle(postTitle);
        post.setPostText(postText);
        post.setBoardId(boardId);
        post.setTopic(topic);
        forumService.addPost(post);
        pageNo = pageNo == null ? 1 : pageNo;
        return forumService.getPagedPosts(topicId, pageNo, CommonConstant.PAGE_SIZE);
    }

    /**
     * 删除版块
     */
    @RequestMapping(value = "/board/removeBoard", method = RequestMethod.GET)
    public String removeBoard(@RequestParam("boardIds") String boardIds) {
        String[] arrIds = boardIds.split(",");
        for (int i = 0; i < arrIds.length; i++) {
            forumService.removeBoard(new Integer(arrIds[i]));
        }
        String targetUrl = "/index.html";
        return "redirect:" + targetUrl;
    }

    /**
     * 删除主题
     */
    @RequestMapping(value = "/boards/{boardId}/topic/delete", method = RequestMethod.POST, consumes = "application/json")
    @ResponseBody
    public Page removeTopic(HttpServletRequest request, @PathVariable Integer boardId, @RequestBody String params) throws Exception {
        ScriptEngine engine = new NashornScriptEngineFactory().getScriptEngine("nashorn");
        String topicIds = (String) engine.eval("var a = " + params + ";a['topicIds']");
        Integer pageNo = (Integer) engine.eval("var a = " + params + ";a['pageNo']");
        String[] arrIds = topicIds.split(",");
        for (int i = 0; i < arrIds.length; i++) {
            forumService.removeTopic(new Integer(arrIds[i]));
        }
        pageNo = pageNo == null ? 1 : pageNo;
        Page pagedTopic = forumService.getPagedTopics(boardId, pageNo,
                CommonConstant.PAGE_SIZE);
        return pagedTopic;
    }

    /**
     * 设置精华帖
     */
    @RequestMapping(value = "/boards/{boardId}/topic", method = RequestMethod.POST, consumes = "application/json")
    @ResponseBody
    public Page makeDigestTopic(HttpServletRequest request, @PathVariable Integer boardId, @RequestBody String params) throws Exception {
        ScriptEngine engine = new NashornScriptEngineFactory().getScriptEngine("nashorn");
        String topicIds = (String) engine.eval("var a = " + params + ";a['topicIds']");
        Integer pageNo = (Integer) engine.eval("var a = " + params + ";a['pageNo']");
        String[] arrIds = topicIds.split(",");
        for (int i = 0; i < arrIds.length; i++) {
            forumService.makeDigestTopic(new Integer(arrIds[i]));
        }
        pageNo = pageNo == null ? 1 : pageNo;
        Page pagedTopic = forumService.getPagedTopics(boardId, pageNo,
                CommonConstant.PAGE_SIZE);
        return pagedTopic;
    }
}
